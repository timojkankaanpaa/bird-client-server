{"version":3,"sources":["logo.svg","components/ObservationComponent.js","controllers/ObservationController.js","containers/ObservationContainer.js","App.js","serviceWorker.js","index.js"],"names":["ObservationComponent","props","birdOptions","theBirds","map","bird","index","value","id","finnish","parseInt","style","marginLeft","onChange","e","change","name","observation","place","type","time","user","onClick","submit","getBirds","a","fetch","then","response","json","data","method","headers","body","JSON","stringify","ObservationContainer","useState","birds","setBirds","setObservation","catch","error","alert","useEffect","initData","localStorage","setItem","create","observationNew","target","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4OAAe,I,0CCyBAA,EAvBa,SAACC,GAIzB,IAAMC,EAAaD,EAAME,SAASC,KAAI,SAACC,EAAMC,GACzC,OAAO,wBAA8BC,MAAOF,EAAKG,GAA1C,SAA+CH,EAAKI,SAAvCC,SAASJ,OAGjC,OACI,gCACI,wDACA,wBAAOK,MAAO,CAACC,WAAY,OAA3B,UACA,+BAAI,uCAAc,6BAAI,wBAAQC,SAAU,SAAAC,GAAC,OAAEb,EAAMc,OAAOD,IAAIE,KAAK,SAA3C,SAAqDd,SAC3E,+BAAI,wCAAe,6BAAI,uBAAOW,SAAU,SAAAC,GAAC,OAAEb,EAAMc,OAAOD,IAAIE,KAAK,QAAQT,MAAON,EAAMgB,YAAYC,MAAOC,KAAK,cAC9G,+BAAI,sCAAa,6BAAI,uBAAON,SAAU,SAAAC,GAAC,OAAEb,EAAMc,OAAOD,IAAIE,KAAK,OAAOT,MAAON,EAAMgB,YAAYG,KAAMD,KAAK,cAC1G,+BAAI,mDAAiB,6BAAI,uBAAON,SAAU,SAAAC,GAAC,OAAEb,EAAMc,OAAOD,IAAIE,KAAK,OAAOT,MAAON,EAAMgB,YAAYI,KAAMF,KAAK,cAC9G,6BAAI,6BAAI,wBAAQG,QAASrB,EAAMsB,OAAvB,iC,MCfb,SAAeC,IAAtB,+B,4CAAO,sBAAAC,EAAA,+EAEIC,MAAM,YACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAS,OAAOA,MAJnB,4C,kEAOA,WAAsBb,GAAtB,eAAAQ,EAAA,sEACoBC,MAAM,cAAe,CACxCK,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUlB,KANtB,cACGW,EADH,yBAQMA,EAASC,QARf,4C,sBCNP,IA4CeO,EA5Ca,WAAK,IAAD,EACFC,mBAAS,IADP,mBACrBC,EADqB,KACdC,EADc,OAEUF,mBAAS,IAFnB,mBAErBpB,EAFqB,KAERuB,EAFQ,iDAQ5B,sBAAAf,EAAA,sDACID,IACCG,MAAK,SAAAG,GACFS,EAAST,MAEZW,OAAM,SAACC,GACJC,MAAM,SAAUD,MANxB,4CAR4B,sBAI5BE,qBAAU,YAJkB,mCAKxBC,KACF,IAYFD,qBAAU,WACNE,aAAaC,QAAQ,cAAeb,KAAKC,UAAUlB,MACrD,CAACA,IAeH,OACI,8BAGI,cAAC,EAAD,CAAsBd,SAAUmC,EAAOf,OAV5B,YDvBhB,SAAP,2BCwBsByB,CAAO/B,GACrB0B,MAAM,eAAgBT,KAAKC,UAAUlB,KAQ4BA,YAAaA,EAAaF,OAhB1E,SAACD,GAClB,IAAImC,EAAc,eAAOhC,GACzBgC,EAAenC,EAAEoC,OAAOlC,MAAMF,EAAEoC,OAAO3C,MACvCiC,EAAeS,SCjBRE,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.439e056c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\n\nconst ObservationComponent =(props)=>{\n    //console.log(props.theBirds);\n\n    //luetaan linnut taulukosta ja laitetaan option elementtiin\n    const birdOptions =props.theBirds.map((bird, index)=>{\n        return <option key={parseInt(index)} value={bird.id}>{bird.finnish}</option>\n    })\n\n    return(\n        <div>\n            <h2>Tallenna lintuhavainto</h2>\n            <table style={{marginLeft: '45%'}}>\n            <tr><td>Lintu</td><td><select onChange={e=>props.change(e)} name=\"birdid\">{birdOptions}</select></td></tr>\n            <tr><td>Paikka</td><td><input onChange={e=>props.change(e)} name=\"place\" value={props.observation.place} type=\"text\"></input></td></tr>\n            <tr><td>Aika</td><td><input onChange={e=>props.change(e)} name=\"time\" value={props.observation.time} type=\"text\"></input></td></tr>\n            <tr><td>Käyttäjä</td><td><input onChange={e=>props.change(e)} name=\"user\" value={props.observation.user} type=\"text\"></input></td></tr>\n            <tr><td><button onClick={props.submit}>Tallenna</button></td></tr>\n            </table>\n            \n        </div>\n    );\n}\n\nexport default ObservationComponent;","import birds from '../bird.json';\n\n/**FUntio palauttaa array, jossa lintuja */\nexport async function getBirds(){\n    //Käytä JS fetch ja hae linnut backendista\n    return fetch('birds_fi')\n    .then(response => response.json())\n    .then(data => {return(data)});\n}\n\nexport async function create(observation){\n    const response = await fetch(\"observation\", {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(observation) // body data type must match \"Content-Type\" header\n      });\n      return response.json(); // parses JSON response into native JavaScript objects\n}","import React,{useState,useEffect} from 'react';\nimport ObservationComponent from '../components/ObservationComponent';\nimport {getBirds,create} from '../controllers/ObservationController';\n\nconst ObservationContainer =()=>{\n    const [birds, setBirds] = useState([]); //constin perässä ensin muuttuja sitten funktio\n    const [observation, setObservation] = useState({});\n\n    useEffect(()=>{\n        initData();\n    },[]);\n\n    async function initData(){\n        getBirds() //pyydetään linnut controllerilta\n        .then(data=>{\n            setBirds(data);          //tallennetaan tulos paikallisesti\n        })\n        .catch((error) => {\n            alert('Error:', error);\n          });\n    }\n\n    useEffect(()=>{\n        localStorage.setItem(\"observation\", JSON.stringify(observation));\n    },[observation])\n    \n    //takes care updating the observation\n    const handleChange = (e) => {\n        let observationNew = {...observation};   //avoid mutation\n        observationNew[e.target.name]=e.target.value;\n        setObservation(observationNew); //storing to the memory of container\n      };\n\n    const handleSubmit=()=>{\n        const result =create(observation);\n        alert(\"Tallennettu \" +JSON.stringify(observation));\n    }\n\n\n    return(\n        <div>\n            {/* Kutsutaan controllerin getBirds -funtiota ja välitetään\n            linnut componetille Ctrl+Shift+/*/}\n            <ObservationComponent theBirds={birds} submit={handleSubmit} observation={observation} change={handleChange}/>\n       </div>\n    );\n}\n\nexport default ObservationContainer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ObservationContainer from './containers/ObservationContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ObservationContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}